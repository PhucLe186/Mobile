// FollowController_SQL.js
const db = require('../config/db'); // sử dụng mysql2 connection pool

class FollowController {
    // [GET] /api/users/:userId/following?page=1&limit=10
    async getFollowingList(req, res, next) {
        try {
            const { userId } = req.params;
            const page = parseInt(req.query.page) || 1;
            const limit = parseInt(req.query.limit) || 10;
            const offset = (page - 1) * limit;

            const [users] = await db.execute(
                `SELECT u.user_id AS id, u.username, u.avatar_url
                 FROM Follows f
                 JOIN Users u ON f.following_id = u.user_id
                 WHERE f.follower_id = ?
                 ORDER BY f.followed_at DESC
                 LIMIT ? OFFSET ?`,
                [userId, limit, offset]
            );

            const [[{ total }]] = await db.execute(
                `SELECT COUNT(*) AS total FROM Follows WHERE follower_id = ?`,
                [userId]
            );

            res.json({ success: true, data: users, pagination: { page, limit, total } });
        } catch (error) {
            next(error);
        }
    }

    // [GET] /api/users/:userId/followers?page=1&limit=10
    async getFollowersList(req, res, next) {
        try {
            const { userId } = req.params;
            const page = parseInt(req.query.page) || 1;
            const limit = parseInt(req.query.limit) || 10;
            const offset = (page - 1) * limit;

            const [users] = await db.execute(
                `SELECT u.user_id AS id, u.username, u.avatar_url
                 FROM Follows f
                 JOIN Users u ON f.follower_id = u.user_id
                 WHERE f.following_id = ?
                 ORDER BY f.followed_at DESC
                 LIMIT ? OFFSET ?`,
                [userId, limit, offset]
            );

            const [[{ total }]] = await db.execute(
                `SELECT COUNT(*) AS total FROM Follows WHERE following_id = ?`,
                [userId]
            );

            res.json({ success: true, data: users, pagination: { page, limit, total } });
        } catch (error) {
            next(error);
        }
    }

    // [POST] /api/follow
    async followUser(req, res, next) {
        try {
            const { followerId, followingId } = req.body;
            if (followerId === followingId) return res.status(400).json({ error: 'Cannot follow yourself' });

            const [[existing]] = await db.execute(
                `SELECT * FROM Follows WHERE follower_id = ? AND following_id = ?`,
                [followerId, followingId]
            );

            if (existing) return res.status(400).json({ error: 'Already following this user' });

            await db.execute(
                `INSERT INTO Follows (follower_id, following_id) VALUES (?, ?)`,
                [followerId, followingId]
            );

            res.status(201).json({ success: true, message: 'Followed successfully' });
        } catch (error) {
            next(error);
        }
    }

    // [DELETE] /api/unfollow
    async unfollowUser(req, res, next) {
        try {
            const { followerId, followingId } = req.body;

            const [result] = await db.execute(
                `DELETE FROM Follows WHERE follower_id = ? AND following_id = ?`,
                [followerId, followingId]
            );

            if (result.affectedRows === 0) return res.status(404).json({ error: 'Follow relationship not found' });

            res.json({ success: true, message: 'Unfollowed successfully' });
        } catch (error) {
            next(error);
        }
    }

    // [GET] /api/users/check-follow/:followerId/:followingId
    async checkFollowStatus(req, res, next) {
        try {
            const { followerId, followingId } = req.params;

            const [[result]] = await db.execute(
                `SELECT EXISTS(
                    SELECT 1 FROM Follows
                    WHERE follower_id = ? AND following_id = ?
                ) AS isFollowing`,
                [followerId, followingId]
            );

            res.json({ success: true, data: { isFollowing: !!result.isFollowing } });
        } catch (error) {
            next(error);
        }
    }
}

module.exports = new FollowController();
